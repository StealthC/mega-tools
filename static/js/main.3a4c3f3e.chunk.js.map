{"version":3,"sources":["features/palette/SMDColorSelector.module.scss","app/hooks.ts","features/palette/paletteSlice.ts","features/palette/smdColors.ts","features/palette/SMDColorSelector.tsx","ColorsPage.tsx","GradientsPage.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppSelector","useSelector","paletteSlice","createSlice","name","initialState","color","reducers","setColor","state","action","payload","actions","getColor","palette","BRIGHTNESS_NORMAL","BRIGHTNESS_SHADOW","BRIGHTNESS_HIGHLIGHT","getBits","smdColor","r","g","b","getColorFromBits","colorBits","ConvertByteToIndex","byte","byteTable","i","length","BrightnessMode","selectMode","mode","SHADOW","HIGHLIGHT","formatBitHex","n","toString","SMDColorSelector","initialColor","initialBrightnessMode","NORMAL","onChangeColor","useState","colorInput","setColorInput","setMode","rSlider","useRef","gSlider","bSlider","webColor","brightness","bits","convertSMDTo24Bit","repeat","Math","max","rgbChange","parseInt","current","value","Row","Col","xs","className","style","backgroundColor","minWidth","Form","Group","as","md","Label","column","Select","defaultValue","onChange","ev","currentTarget","Control","type","B32Color","convert24BitToSMD","substr","styles","Sliders","R","Range","ref","min","step","Value","G","B","ColorsPage","dispatch","useDispatch","ncolor","GradientsPage","lg","App","Container","href","Nav","variant","Item","Link","NavLink","to","path","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","paletteReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a4c3f3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sliders\":\"SMDColorSelector_Sliders__3ENca\",\"Value\":\"SMDColorSelector_Value__2Dhvx\",\"ColorInput\":\"SMDColorSelector_ColorInput__3URPy\",\"R\":\"SMDColorSelector_R__2SUfS\",\"G\":\"SMDColorSelector_G__39nqU\",\"B\":\"SMDColorSelector_B__18YXH\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface PaletteState {\n  color: number;\n}\n\nconst initialState: PaletteState = {\n  color: 0,\n};\n\nexport const paletteSlice = createSlice({\n  name: 'palette',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setColor: (state, action: PayloadAction<number>) => {\n      state.color = action.payload;\n    },\n  },\n});\n\nexport const { setColor } = paletteSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.palette.value)`\nexport const getColor = (state: RootState) => state.palette.color;\n\nexport default paletteSlice.reducer;\n","// Got the correct values from http://gendev.spritesmind.net/forum/viewtopic.php?t=2188\nexport const BRIGHTNESS_NORMAL = [0, 52, 87, 116, 144, 172, 206, 255];\nexport const BRIGHTNESS_SHADOW = [0, 29, 52, 70, 87, 101, 116, 130];\nexport const BRIGHTNESS_HIGHLIGHT = [130, 144, 158, 172, 187, 206, 228, 255];\n\nexport const BRIGHTNESS_NORMAL_LINEAR = [0, 36, 72, 108, 144, 180, 216, 255];\nexport const BRIGHTNESS_SHADOW_LINEAR = [0, 18, 36, 54, 72, 90, 108, 126];\nexport const BRIGHTNESS_HIGHLIGHT_LINEAR = [\n  126, 144, 162, 180, 198, 216, 234, 255,\n];\n\nexport interface ColorBits {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport function isValid(smdColor: number): boolean {\n  return (smdColor & ~0xeee) === 0;\n}\n\nexport function getBits(smdColor: number): ColorBits {\n  const r = (smdColor >> 1) & 7;\n  const g = (smdColor >> 5) & 7;\n  const b = (smdColor >> 9) & 7;\n  return { r, g, b };\n}\n\nexport function getColorFromBits(colorBits: ColorBits): number {\n  return (colorBits.b << 9) | (colorBits.g << 5) | (colorBits.r << 1);\n}\n\nexport function ConvertByteToIndex(byte: number, byteTable: number[]): number {\n  for (let i = 0; i < byteTable.length; i += 1) {\n    if (byteTable[i] >= byte) {\n      if (i > 0) {\n        if (byte - byteTable[i - 1] < byteTable[i] - byte) {\n          return i - 1;\n        }\n      } else {\n        return i;\n      }\n    }\n  }\n  return byteTable.length - 1;\n}\n\nexport function convert24BitToSMD(\n  B32Color: number,\n  brightness = BRIGHTNESS_NORMAL,\n): number {\n  const b = ConvertByteToIndex(B32Color & 0xff, brightness);\n  const g = ConvertByteToIndex((B32Color >> 8) & 0xff, brightness);\n  const r = ConvertByteToIndex((B32Color >> 16) & 0xff, brightness);\n  return getColorFromBits({ r, g, b });\n}\n\nexport function convertSMDTo24Bit(\n  smdColor: number,\n  brightness = BRIGHTNESS_NORMAL,\n): number {\n  const bits = getBits(smdColor);\n  bits.r = brightness[bits.r];\n  bits.g = brightness[bits.g];\n  bits.b = brightness[bits.b];\n  return (bits.r << 16) | (bits.g << 8) | bits.b;\n}\n","import React, { useRef, useState } from 'react';\nimport { Row, Col, Form } from 'react-bootstrap';\nimport {\n  BRIGHTNESS_HIGHLIGHT,\n  BRIGHTNESS_NORMAL,\n  BRIGHTNESS_SHADOW,\n  convert24BitToSMD,\n  convertSMDTo24Bit,\n  getBits,\n  getColorFromBits,\n  isValid,\n} from './smdColors';\nimport styles from './SMDColorSelector.module.scss';\n\nexport enum BrightnessMode {\n  NORMAL = 0,\n  SHADOW = 1,\n  HIGHLIGHT = 2,\n}\n\nexport interface SMDColorSelectorProps {\n  initialColor?: number;\n  initialBrightnessMode?: BrightnessMode;\n  onChangeColor?: (color: number) => void;\n}\n\nfunction selectMode(mode: BrightnessMode): number[] {\n  if (mode === BrightnessMode.SHADOW) {\n    return BRIGHTNESS_SHADOW;\n  }\n  if (mode === BrightnessMode.HIGHLIGHT) {\n    return BRIGHTNESS_HIGHLIGHT;\n  }\n  return BRIGHTNESS_NORMAL;\n}\n\nfunction formatBitHex(n: number) {\n  return `0x${(n * 2).toString(16)}`;\n}\n\nexport function SMDColorSelector({\n  initialColor = 0x0,\n  initialBrightnessMode = BrightnessMode.NORMAL,\n  onChangeColor,\n}: SMDColorSelectorProps): JSX.Element {\n  const [color, setColor] = useState(initialColor);\n  const [colorInput, setColorInput] = useState(\n    `0x${initialColor.toString(16)}`,\n  );\n  const [mode, setMode] = useState(initialBrightnessMode);\n  const { r, g, b } = getBits(color);\n  const rSlider = useRef<HTMLInputElement>(null);\n  const gSlider = useRef<HTMLInputElement>(null);\n  const bSlider = useRef<HTMLInputElement>(null);\n  const b24Color = convertSMDTo24Bit(color, selectMode(mode));\n  let webColor = b24Color.toString(16);\n  webColor = `#${'0'.repeat(Math.max(0, 6 - webColor.length))}${webColor}`;\n  const rgbChange = () => {\n    setColor(\n      getColorFromBits({\n        r: parseInt(rSlider.current?.value || '0'),\n        g: parseInt(gSlider.current?.value || '0'),\n        b: parseInt(bSlider.current?.value || '0'),\n      }),\n    );\n    setColorInput(`0x${color.toString(16)}`);\n    if (onChangeColor) {\n      onChangeColor(color);\n    }\n  };\n  const webColorChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setColor(\n      convert24BitToSMD(\n        parseInt(ev.currentTarget.value.substr(1), 16),\n        selectMode(mode),\n      ),\n    );\n  };\n  const colorInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setColorInput(ev.currentTarget.value);\n    const n = parseInt(ev.currentTarget.value);\n    if (isValid(n)) {\n      setColor(n);\n      if (onChangeColor) {\n        onChangeColor(color);\n      }\n    }\n  };\n  return (\n    <div>\n      <Row>\n        <Col xs=\"auto\">\n          <div className=\"border rounded border-2 p-1 h-100\">\n            <div\n              className=\"h-100\"\n              style={{\n                backgroundColor: webColor,\n                minWidth: '15vw',\n              }}\n            >\n              &nbsp;\n            </div>\n          </div>\n        </Col>\n        <Col>\n          <Form.Group as={Row} xs={2} md=\"auto\">\n            <Form.Label column xs={6} md=\"auto\">\n              Brightness Mode:\n            </Form.Label>\n            <Col xs={6}>\n              <Form.Select\n                defaultValue={mode}\n                onChange={(ev) => setMode(parseInt(ev.currentTarget.value))}\n              >\n                <option value={BrightnessMode.NORMAL}>Normal</option>\n                <option value={BrightnessMode.SHADOW}>Shadow</option>\n                <option value={BrightnessMode.HIGHLIGHT}>Highlight</option>\n              </Form.Select>\n            </Col>\n\n            <Form.Label column xs={6} md=\"auto\">\n              SMD:\n            </Form.Label>\n            <Col xs={6}>\n              <Form.Control value={colorInput} onChange={colorInputChange} />\n            </Col>\n\n            <Form.Label column xs={4} md=\"auto\">\n              Web:{' '}\n            </Form.Label>\n            <Col xs={4}>\n              <Form.Control\n                type=\"color\"\n                value={webColor}\n                onChange={webColorChange}\n              />\n            </Col>\n            <Form.Label column xs={4} md=\"auto\">\n              {webColor}\n            </Form.Label>\n          </Form.Group>\n\n          <div className={styles.Sliders}>\n            <Row className={styles.R}>\n              <Col>\n                <Form.Range\n                  ref={rSlider}\n                  min={0}\n                  max={7}\n                  step={1}\n                  value={r}\n                  onChange={rgbChange}\n                />\n              </Col>\n              <Col className={styles.Value} xs=\"auto\">\n                {formatBitHex(r)}\n              </Col>\n            </Row>\n            <Row className={styles.G}>\n              <Col>\n                <Form.Range\n                  ref={gSlider}\n                  min={0}\n                  max={7}\n                  step={1}\n                  value={g}\n                  onChange={rgbChange}\n                />\n              </Col>\n              <Col className={styles.Value} xs=\"auto\">\n                {formatBitHex(g)}\n              </Col>\n            </Row>\n            <Row className={styles.B}>\n              <Col>\n                <Form.Range\n                  ref={bSlider}\n                  min={0}\n                  max={7}\n                  step={1}\n                  value={b}\n                  onChange={rgbChange}\n                />\n              </Col>\n              <Col className={styles.Value} xs=\"auto\">\n                {formatBitHex(b)}\n              </Col>\n            </Row>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getColor, setColor } from './features/palette/paletteSlice';\nimport { SMDColorSelector } from './features/palette/SMDColorSelector';\n\nexport function ColorsPage(): JSX.Element {\n  const dispatch = useAppDispatch();\n  const color = useAppSelector(getColor);\n  const onChangeColor = (ncolor: number) => {\n    dispatch(setColor(ncolor));\n  };\n  return (\n    <div>\n      <SMDColorSelector initialColor={color} onChangeColor={onChangeColor} />\n    </div>\n  );\n}\n","import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { SMDColorSelector } from './features/palette/SMDColorSelector';\n\nexport function GradientsPage(): JSX.Element {\n  return (\n    <div>\n      <Row>\n        <Col lg={6}>\n          <SMDColorSelector />\n        </Col>\n        <Col lg={6}>\n          <SMDColorSelector />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Redirect,\n} from 'react-router-dom';\nimport { Container, Nav } from 'react-bootstrap';\nimport { ColorsPage } from './ColorsPage';\nimport { GradientsPage } from './GradientsPage';\n\nfunction App(): JSX.Element {\n  return (\n    <Container>\n      <h1>Mega Tools</h1>\n      <a className=\"float-end\" href=\"https://github.com/StealthC/mega-tools\">\n        View on Github\n      </a>\n      <p className=\"pb-2\">\n        Here you may encounter some tools to help learn Sega Genesis/Mega Drive\n        development.\n      </p>\n\n      <Router>\n        <Nav variant=\"tabs\">\n          <Nav.Item>\n            <Nav.Link as={NavLink} to=\"/colors\">\n              Color\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link as={NavLink} to=\"/gradient\">\n              Gradient (Soon&trade;)\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link as={NavLink} to=\"/vdp\">\n              VDP (Soon&trade;)\n            </Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <div className=\"py-4\">\n          <Switch>\n            <Route path=\"/colors\">\n              <ColorsPage />\n            </Route>\n            <Route path=\"/gradient\">\n              <GradientsPage />\n            </Route>\n            <Route path=\"/\">\n              <Redirect to=\"/colors\" />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n\n      <p className=\"pt-4 text-center\">\n        If you like this project and want to help me to create more,{' '}\n        <a href=\"https://www.patreon.com/stealthc\">\n          please consider being my patron\n        </a>\n        .\n      </p>\n    </Container>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500),\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  },\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount));\n    }\n  };\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport paletteReducer from '../features/palette/paletteSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    palette: paletteReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './app/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}