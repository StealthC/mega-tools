{"version":3,"sources":["features/palette/SMDColorSelector.module.scss","features/palette/smdColors.ts","features/palette/SMDColorSelector.tsx","ColorsPage.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/palette/paletteSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","BRIGHTNESS_NORMAL","BRIGHTNESS_SHADOW","BRIGHTNESS_HIGHLIGHT","getBits","smdColor","r","g","b","getColorFromBits","colorBits","BrightnessMode","formatBitHex","n","toString","SMDColorSelector","initialColor","initialBrightnessMode","NORMAL","useState","color","setColor","colorInput","setColorInput","mode","setMode","rSlider","useRef","gSlider","bSlider","webColor","brightness","bits","convertSMDTo24Bit","SHADOW","HIGHLIGHT","selectMode","repeat","Math","max","length","rgbChange","current","value","Row","Col","xs","className","style","backgroundColor","minWidth","Form","Group","as","Control","styles","ColorInput","onChange","ev","currentTarget","parseInt","Label","column","Select","defaultValue","Sliders","R","Range","ref","min","step","Value","G","B","ColorsPage","App","Container","href","Nav","variant","Item","Link","NavLink","to","path","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","paletteSlice","store","configureStore","reducer","counter","counterReducer","palette","paletteReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ddcdb660.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sliders\":\"SMDColorSelector_Sliders__3ENca\",\"Value\":\"SMDColorSelector_Value__2Dhvx\",\"ColorInput\":\"SMDColorSelector_ColorInput__3URPy\",\"R\":\"SMDColorSelector_R__2SUfS\",\"G\":\"SMDColorSelector_G__39nqU\",\"B\":\"SMDColorSelector_B__18YXH\"};","// Got the correct values from http://gendev.spritesmind.net/forum/viewtopic.php?t=2188\r\nexport const BRIGHTNESS_NORMAL = [0, 52, 87, 116, 144, 172, 206, 255]\r\nexport const BRIGHTNESS_SHADOW = [0, 29, 52, 70, 87, 101, 116, 130]\r\nexport const BRIGHTNESS_HIGHLIGHT = [130, 144, 158, 172, 187, 206, 228, 255]\r\n\r\nexport const BRIGHTNESS_NORMAL_LINEAR = [0, 36, 72, 108, 144, 180, 216, 255]\r\nexport const BRIGHTNESS_SHADOW_LINEAR = [0, 18, 36, 54, 72, 90, 108, 126]\r\nexport const BRIGHTNESS_HIGHLIGHT_LINEAR = [126, 144, 162, 180, 198, 216, 234, 255]\r\n\r\nexport interface ColorBits {\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n}\r\n\r\nexport function isValid(smdColor: number): boolean {\r\n    return (smdColor & ~0xEEE) === 0\r\n}\r\n\r\nexport function getBits(smdColor: number): ColorBits {\r\n    const r = (smdColor >> 1) & 7\r\n    const g = (smdColor >> 5) & 7\r\n    const b = (smdColor >> 9) & 7\r\n    return {r, g, b}\r\n}\r\n\r\nexport function getColorFromBits(colorBits: ColorBits): number {\r\n    return (colorBits.b << 9) | (colorBits.g << 5) | (colorBits.r << 1)\r\n}\r\n\r\nexport function ConvertByteToIndex(byte: number, byteTable: number[]): number {\r\n    for (let i = 0; i < byteTable.length; i++) {\r\n        if (byteTable[i] >= byte) {\r\n            if (i > 0) {\r\n                if ((byte - byteTable[i - 1]) < byteTable[i] - byte) {\r\n                    return i - 1\r\n                }\r\n            } else {\r\n                return i\r\n            }\r\n        }\r\n    }\r\n    return byteTable.length - 1\r\n}\r\n\r\nexport function convert24BitToSMD(B32Color: number, brightness = BRIGHTNESS_NORMAL): number {\r\n    let b = ConvertByteToIndex(B32Color & 0xFF, brightness)\r\n    let g = ConvertByteToIndex((B32Color >> 8)  & 0xFF, brightness)\r\n    let r = ConvertByteToIndex((B32Color >> 16)  & 0xFF, brightness)\r\n    return getColorFromBits({r, g, b})\r\n}\r\n\r\nexport function convertSMDTo24Bit(smdColor: number, brightness = BRIGHTNESS_NORMAL): number {\r\n    const bits = getBits(smdColor)\r\n    bits.r = brightness[bits.r]\r\n    bits.g = brightness[bits.g]\r\n    bits.b = brightness[bits.b]\r\n    return (bits.r << 16) | (bits.g << 8) | (bits.b)\r\n}","import React, { useRef, useState } from \"react\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport {\r\n  BRIGHTNESS_HIGHLIGHT,\r\n  BRIGHTNESS_NORMAL,\r\n  BRIGHTNESS_SHADOW,\r\n  convertSMDTo24Bit,\r\n  getBits,\r\n  getColorFromBits,\r\n  isValid,\r\n} from \"./smdColors\";\r\nimport styles from \"./SMDColorSelector.module.scss\";\r\n\r\nexport enum BrightnessMode {\r\n  NORMAL = 0,\r\n  SHADOW = 1,\r\n  HIGHLIGHT = 2,\r\n}\r\n\r\ninterface SMDColorSelectorProps {\r\n  initialColor?: number;\r\n  initialBrightnessMode?: BrightnessMode;\r\n}\r\n\r\nfunction selectMode(mode: BrightnessMode): number[] {\r\n  if (mode === BrightnessMode.SHADOW) {\r\n    return BRIGHTNESS_SHADOW;\r\n  } else if (mode === BrightnessMode.HIGHLIGHT) {\r\n    return BRIGHTNESS_HIGHLIGHT;\r\n  } else {\r\n    return BRIGHTNESS_NORMAL;\r\n  }\r\n}\r\n\r\nfunction formatBitHex(n: number) {\r\n  return \"0x\" + (n * 2).toString(16);\r\n}\r\n\r\nexport function SMDColorSelector({\r\n  initialColor = 0x0,\r\n  initialBrightnessMode = BrightnessMode.NORMAL,\r\n}: SMDColorSelectorProps) {\r\n  const [color, setColor] = useState(initialColor);\r\n  const [colorInput, setColorInput] = useState(\r\n    \"0x\" + initialColor.toString(16)\r\n  );\r\n  const [mode, setMode] = useState(initialBrightnessMode);\r\n  const { r, g, b } = getBits(color);\r\n  const rSlider = useRef<any>(null);\r\n  const gSlider = useRef<any>(null);\r\n  const bSlider = useRef<any>(null);\r\n  const b24Color = convertSMDTo24Bit(color, selectMode(mode));\r\n  let webColor = b24Color.toString(16);\r\n  webColor = \"#\" + \"0\".repeat(Math.max(0, 6 - webColor.length)) + webColor;\r\n  const rgbChange = () => {\r\n    setColor(\r\n      getColorFromBits({\r\n        r: rSlider.current?.value || 0,\r\n        g: gSlider.current?.value || 0,\r\n        b: bSlider.current?.value || 0,\r\n      })\r\n    );\r\n    setColorInput(\"0x\" + color.toString(16));\r\n  };\r\n  const colorInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    setColorInput(ev.currentTarget.value);\r\n    let n = parseInt(ev.currentTarget.value);\r\n    if (isValid(n)) {\r\n      setColor(n);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col xs=\"auto\">\r\n          <div className=\"border rounded border-2 p-1 h-100\">\r\n            <div\r\n              className=\"h-100\"\r\n              style={{\r\n                backgroundColor: webColor,\r\n                minWidth: \"15vw\"\r\n              }}\r\n            >\r\n              &nbsp;\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        <Col>\r\n          <Form.Group as={Row}>\r\n            <Col xs=\"auto\">\r\n              <Form.Control\r\n                className={styles.ColorInput}\r\n                value={colorInput}\r\n                onChange={colorInputChange}\r\n              />\r\n            </Col>\r\n            <Form.Label column xs=\"auto\">\r\n              Brightness Mode:\r\n            </Form.Label>\r\n            <Col>\r\n              <Form.Select\r\n                defaultValue={mode}\r\n                onChange={(ev) => setMode(parseInt(ev.currentTarget.value))}\r\n              >\r\n                <option value={BrightnessMode.NORMAL}>Normal</option>\r\n                <option value={BrightnessMode.SHADOW}>Shadow</option>\r\n                <option value={BrightnessMode.HIGHLIGHT}>Highlight</option>\r\n              </Form.Select>\r\n            </Col>\r\n            <Form.Label column xs=\"auto\">\r\n              Web: {webColor}\r\n            </Form.Label>\r\n          </Form.Group>\r\n\r\n          <div className={styles.Sliders}>\r\n            <Row className={styles.R}>\r\n              <Col>\r\n                <Form.Range\r\n                  ref={rSlider}\r\n                  min={0}\r\n                  max={7}\r\n                  step={1}\r\n                  value={r}\r\n                  onChange={rgbChange}\r\n                />\r\n              </Col>\r\n              <Col className={styles.Value} xs=\"auto\">\r\n                {formatBitHex(r)}\r\n              </Col>\r\n            </Row>\r\n            <Row className={styles.G}>\r\n              <Col>\r\n                <Form.Range\r\n                  ref={gSlider}\r\n                  min={0}\r\n                  max={7}\r\n                  step={1}\r\n                  value={g}\r\n                  onChange={rgbChange}\r\n                />\r\n              </Col>\r\n              <Col className={styles.Value} xs=\"auto\">\r\n                {formatBitHex(g)}\r\n              </Col>\r\n            </Row>\r\n            <Row className={styles.B}>\r\n              <Col>\r\n                <Form.Range\r\n                  ref={bSlider}\r\n                  min={0}\r\n                  max={7}\r\n                  step={1}\r\n                  value={b}\r\n                  onChange={rgbChange}\r\n                />\r\n              </Col>\r\n              <Col className={styles.Value} xs=\"auto\">\r\n                {formatBitHex(b)}\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { SMDColorSelector } from \"./features/palette/SMDColorSelector\";\r\n\r\nexport function ColorsPage() {\r\n  return (\r\n    <div>\r\n      <SMDColorSelector />\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Redirect,\n} from \"react-router-dom\";\nimport { ColorsPage } from \"./ColorsPage\";\nimport { Container, Nav } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <Container>\n      <h1>Mega Tools</h1>\n      <a className=\"float-end\" href=\"https://github.com/StealthC/mega-tools\">View on Github</a>\n      <p className=\"pb-2\">\n        Here you may encounter some tools to help learn Sega Genesis/Mega Drive\n        development.\n      </p>\n      \n      <Router>\n        <Nav variant=\"tabs\">\n          <Nav.Item>\n            <Nav.Link as={NavLink} to=\"/colors\">\n              Color\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link as={NavLink} to=\"/gradient\">\n              Gradient (Soon&trade;)\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link as={NavLink} to=\"/vdp\">\n              VDP (Soon&trade;)\n            </Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <div className=\"py-4\">\n          <Switch>\n            <Route path=\"/colors\">\n              <ColorsPage />\n            </Route>\n            <Route path=\"/\">\n              <Redirect to=\"/colors\" />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n\n      <p className=\"pt-4 text-center\">\n        If you like this project and want to help me to create more,{\" \"}\n        <a href=\"https://www.patreon.com/stealthc\">\n          please consider being my patron\n        </a>\n        .\n      </p>\n    </Container>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface PaletteState {\n  color: number;\n}\n\nconst initialState: PaletteState = {\n  color: 0,\n};\n\n\nexport const paletteSlice = createSlice({\n  name: 'palette',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setColor: (state, action: PayloadAction<number>) => {\n      state.color = action.payload;\n    }\n  },\n});\n\nexport const { setColor } = paletteSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.palette.value)`\n// export const selectPalette = (state: RootState) => state.palette;\n\nexport default paletteSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport paletteReducer from '../features/palette/paletteSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    palette: paletteReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}