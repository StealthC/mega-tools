{"version":3,"sources":["features/palette/SMDColorSelector.module.scss","app/hooks.ts","utils/smdColors.ts","features/palette/paletteSlice.ts","utils/vdp.ts","features/palette/SMDColorSelector.tsx","ColorsPage.tsx","features/palette/SMDPaletteColors.tsx","GradientsPage.tsx","features/vdp-analysis/ControlAddressOp.tsx","features/vdp-analysis/ControlOp.tsx","VDPControl.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","BrightnessMode","BrightnessModeIndex","selectMode","index","getBits","smdColor","r","g","b","getColorFromBits","colorBits","convertByteToIndex","byte","byteTable","i","length","lerp","start","end","pos","convertSMDTo24Bit","brightness","bits","gradientPosition","from","to","position","fromBits","toBits","Math","round","convert24BitsToWeb","color","colorString","toString","repeat","max","MemorySpace","initialState","colorMode","gradientStart","gradientEnd","gradientSteps","gradientMode","paletteSlice","createSlice","name","reducers","setColor","state","action","payload","setColorMode","setGradientStart","setGradientEnd","setGradientSteps","setGradientMode","actions","getColor","palette","getGradient","formatBitHex","n","SMDColorSelector","initialColor","initialBrightnessMode","disableMode","onChangeColor","useState","colorInput","setColorInput","mode","setMode","rSlider","useRef","gSlider","bSlider","webColor","rgbChange","newColor","current","valueAsNumber","Row","Col","xs","className","style","backgroundColor","width","Form","Group","as","lg","Label","column","sm","md","Select","defaultValue","onChange","ev","parseInt","currentTarget","value","Control","type","B32Color","convert24BitToSMD","substr","styles","Sliders","R","Range","ref","min","step","Value","G","B","ColorsPage","dispatch","ncolor","SMDPaletteColors","colors","elements","map","mixBlendMode","GradientsPage","gradientColors","steps","gradient","push","generateGradient","gradientText","join","ControlAdressOp","values","msn","memorySpace","CRAM","VRAM","VSRAM","VRAM_BYTE","write","DMA","VRAM2VRAMcp","address","getControlAddressValues","op","ControlOp","opcodeText","setOpcodeText","result","registerWords","interpretLongValueToControl","VDPControl","App","Container","href","Nav","variant","Item","Link","NavLink","path","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","paletteReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8969c02c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sliders\":\"SMDColorSelector_Sliders__3ENca\",\"Value\":\"SMDColorSelector_Value__2Dhvx\",\"ColorInput\":\"SMDColorSelector_ColorInput__3URPy\",\"R\":\"SMDColorSelector_R__2SUfS\",\"G\":\"SMDColorSelector_G__39nqU\",\"B\":\"SMDColorSelector_B__18YXH\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","// Got the correct values from http://gendev.spritesmind.net/forum/viewtopic.php?t=2188\n\nexport const BrightnessMode = {\n  normal: 0,\n  shadow: 1,\n  highlight: 2,\n  linearNormal: 3,\n  linearShadow: 4,\n  linearHighlight: 5,\n};\n\nexport const BrightnessModeIndex = [\n  [0, 52, 87, 116, 144, 172, 206, 255],\n  [0, 29, 52, 70, 87, 101, 116, 130],\n  [130, 144, 158, 172, 187, 206, 228, 255],\n  [0, 36, 72, 108, 144, 180, 216, 255],\n  [0, 18, 36, 54, 72, 90, 108, 126],\n  [126, 144, 162, 180, 198, 216, 234, 255],\n];\n\nexport function selectMode(index: number) {\n  return BrightnessModeIndex[index];\n}\n\nexport interface ColorBits {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport function isValid(smdColor: number): boolean {\n  return (smdColor & ~0xeee) === 0;\n}\n\nexport function getBits(smdColor: number): ColorBits {\n  const r = (smdColor >>> 1) & 7;\n  const g = (smdColor >>> 5) & 7;\n  const b = (smdColor >>> 9) & 7;\n  return { r, g, b };\n}\n\nexport function getColorFromBits(colorBits: ColorBits): number {\n  return (colorBits.b << 9) | (colorBits.g << 5) | (colorBits.r << 1);\n}\n\nexport function convertByteToIndex(byte: number, byteTable: number[]): number {\n  for (let i = 0; i < byteTable.length; i += 1) {\n    if (byteTable[i] >= byte) {\n      if (i > 0) {\n        if (byte - byteTable[i - 1] < byteTable[i] - byte) {\n          return i - 1;\n        }\n      } else {\n        return i;\n      }\n    }\n  }\n  return byteTable.length - 1;\n}\n\nfunction lerp(start: number, end: number, pos: number) {\n  return (1 - pos) * start + pos * end;\n}\n\nexport function convert24BitToSMD(\n  B32Color: number,\n  brightness = BrightnessModeIndex[0],\n): number {\n  const b = convertByteToIndex(B32Color & 0xff, brightness);\n  const g = convertByteToIndex((B32Color >>> 8) & 0xff, brightness);\n  const r = convertByteToIndex((B32Color >>> 16) & 0xff, brightness);\n  return getColorFromBits({ r, g, b });\n}\n\nexport function convertSMDTo24Bit(\n  smdColor: number,\n  brightness = BrightnessModeIndex[0],\n): number {\n  const bits = getBits(smdColor);\n  bits.r = brightness[bits.r];\n  bits.g = brightness[bits.g];\n  bits.b = brightness[bits.b];\n  return (bits.r << 16) | (bits.g << 8) | bits.b;\n}\n\nexport function gradientPosition(\n  from: number,\n  to: number,\n  position: number,\n): number {\n  const fromBits = getBits(from);\n  const toBits = getBits(to);\n  const resultBits = {\n    r: Math.round(lerp(fromBits.r, toBits.r, position)),\n    g: Math.round(lerp(fromBits.g, toBits.g, position)),\n    b: Math.round(lerp(fromBits.b, toBits.b, position)),\n  };\n\n  return getColorFromBits(resultBits);\n}\n\nexport function generateGradient(\n  from: number,\n  to: number,\n  steps: number,\n): number[] {\n  const gradient = [];\n  for (let i = 0; i < steps; i += 1) {\n    const color = gradientPosition(from, to, i / (steps - 1));\n    gradient.push(color);\n  }\n  return gradient;\n}\n\nexport function convert24BitsToWeb(color: number) {\n  const colorString = color.toString(16);\n  return `#${'0'.repeat(Math.max(0, 6 - colorString.length))}${colorString}`;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { BrightnessMode } from '../../utils/smdColors';\n\nexport interface PaletteState {\n  color: number;\n  colorMode: number;\n  gradientStart: number;\n  gradientEnd: number;\n  gradientSteps: number;\n  gradientMode: number;\n}\n\nconst initialState: PaletteState = {\n  color: 0,\n  colorMode: BrightnessMode.normal,\n  gradientStart: 0,\n  gradientEnd: 0xeee,\n  gradientSteps: 8,\n  gradientMode: BrightnessMode.normal,\n};\n\nexport const paletteSlice = createSlice({\n  name: 'palette',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setColor: (state, action: PayloadAction<number>) => {\n      state.color = action.payload;\n    },\n    setColorMode: (state, action: PayloadAction<number>) => {\n      state.colorMode = action.payload;\n    },\n    setGradientStart: (state, action: PayloadAction<number>) => {\n      state.gradientStart = action.payload;\n    },\n    setGradientEnd: (state, action: PayloadAction<number>) => {\n      state.gradientEnd = action.payload;\n    },\n    setGradientSteps: (state, action: PayloadAction<number>) => {\n      state.gradientSteps = action.payload;\n    },\n    setGradientMode: (state, action: PayloadAction<number>) => {\n      state.gradientMode = action.payload;\n    },\n  },\n});\n\nexport const {\n  setColor,\n  setColorMode,\n  setGradientStart,\n  setGradientEnd,\n  setGradientSteps,\n  setGradientMode,\n} = paletteSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.palette.value)`\nexport const getColor = (state: RootState) => ({\n  color: state.palette.color,\n  colorMode: state.palette.colorMode,\n});\nexport const getGradient = (state: RootState) => ({\n  gradientStart: state.palette.gradientStart,\n  gradientEnd: state.palette.gradientEnd,\n  gradientSteps: state.palette.gradientSteps,\n  gradientMode: state.palette.gradientMode,\n});\n\nexport default paletteSlice.reducer;\n","// http://md.railgun.works/index.php?title=VDP\n\n// Mode Register 1\nexport interface ModeRegister1Values {\n  clearLeftmost8pixels: boolean;\n  generateHorizontalInterrupt: boolean;\n  stopHVCounter: boolean;\n  displayEnabled: boolean;\n}\n\nexport function getModeRegister1Values(n: number): ModeRegister1Values {\n  return {\n    clearLeftmost8pixels: (n & 0x20) !== 0,\n    generateHorizontalInterrupt: (n & 0x10) !== 0,\n    stopHVCounter: (n & 2) !== 0,\n    displayEnabled: (n & 1) !== 0,\n  };\n}\n\nexport function setModeRegister1Byte(v: ModeRegister1Values): number {\n  let n = 4;\n  if (v.displayEnabled) n |= 1;\n  if (v.stopHVCounter) n |= 2;\n  if (v.generateHorizontalInterrupt) n |= 0x10;\n  if (v.clearLeftmost8pixels) n |= 0x20;\n  return n;\n}\n\n// Interpret Register Write\n\nexport function getRegisterWordValues(n: number): RegisterWriteControlValues {\n  return { register: (n & 0x1f00) >> 8, value: n & 0xff };\n}\n\nexport function createModeRegisterWord(v: RegisterWriteControlValues): number {\n  return ((v.register | 0x80) << 8) | v.value;\n}\n\nexport enum MemorySpace {\n  VRAM,\n  CRAM,\n  VSRAM,\n  VRAM_BYTE,\n}\n\nexport interface RegisterWriteControlValues {\n  register: number;\n  value: number;\n}\n\nexport interface AddressControlValues {\n  memorySpace: MemorySpace;\n  write: boolean;\n  address: number;\n  VRAM2VRAMcp: boolean;\n  DMA: boolean;\n}\n\nexport function interpretLongValueToControl(n: number): number[] {\n  if ((n & 0x80008000) !== 0 && (n & 0x60006000) === 0) {\n    // It is two register operations\n    const registerWords = [];\n    registerWords.push(n >>> 16);\n    registerWords.push(n & 0xffff);\n    return registerWords;\n  }\n  if ((n & 0xff0c) !== 0) {\n    // There's a error\n    return [];\n  }\n  // It is a address manipulation\n  return [n];\n}\n\nexport function getControlAddressValues(n: number): AddressControlValues {\n  const msn = (n >>> 15) | (((0x30 & n) >>> 4) << 1);\n  let memorySpace = MemorySpace.CRAM;\n  if (msn === 0b0) memorySpace = MemorySpace.VRAM;\n  if (msn === 0b010) memorySpace = MemorySpace.VSRAM;\n  if (msn === 0b110) memorySpace = MemorySpace.VRAM_BYTE;\n  return {\n    memorySpace,\n    write: (n & 0x40000000) !== 0,\n    DMA: (n & 0x80) !== 0,\n    VRAM2VRAMcp: (n & 0x40) !== 0,\n    address: ((0x3fff0000 & n) >>> 16) | ((0b11 & n) << 14),\n  };\n}\n","import React, { useRef, useState } from 'react';\nimport { Row, Col, Form } from 'react-bootstrap';\nimport {\n  BrightnessMode,\n  convert24BitsToWeb,\n  convert24BitToSMD,\n  convertSMDTo24Bit,\n  getBits,\n  getColorFromBits,\n  isValid,\n  selectMode,\n} from '../../utils/smdColors';\nimport styles from './SMDColorSelector.module.scss';\n\nexport interface SMDColorSelectorProps {\n  initialColor?: number;\n  initialBrightnessMode?: number;\n  disableMode?: boolean;\n  onChangeColor?: (color: number) => void;\n}\n\nfunction formatBitHex(n: number) {\n  return `0x${(n * 2).toString(16)}`;\n}\n\nexport function SMDColorSelector({\n  initialColor = 0x0,\n  initialBrightnessMode = BrightnessMode.normal,\n  disableMode,\n  onChangeColor,\n}: SMDColorSelectorProps): JSX.Element {\n  const [color, setColor] = useState(initialColor);\n  const [colorInput, setColorInput] = useState(\n    `0x${initialColor.toString(16)}`,\n  );\n  const [mode, setMode] = useState(initialBrightnessMode);\n  const { r, g, b } = getBits(color);\n  const rSlider = useRef<HTMLInputElement>(null);\n  const gSlider = useRef<HTMLInputElement>(null);\n  const bSlider = useRef<HTMLInputElement>(null);\n  const b24Color = convertSMDTo24Bit(color, selectMode(mode));\n  const webColor = convert24BitsToWeb(b24Color);\n  const rgbChange = () => {\n    const newColor = getColorFromBits({\n      r: rSlider.current?.valueAsNumber || 0,\n      g: gSlider.current?.valueAsNumber || 0,\n      b: bSlider.current?.valueAsNumber || 0,\n    });\n    setColorInput(`0x${newColor.toString(16)}`);\n    setColor(newColor);\n    if (onChangeColor) {\n      onChangeColor(newColor);\n    }\n  };\n  const webColorChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    const n = convert24BitToSMD(\n      parseInt(ev.currentTarget.value.substr(1), 16),\n      selectMode(mode),\n    );\n    setColor(n);\n    if (onChangeColor) {\n      onChangeColor(n);\n    }\n  };\n  const colorInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setColorInput(ev.currentTarget.value);\n    const n = parseInt(ev.currentTarget.value);\n    if (isValid(n)) {\n      setColor(n);\n      if (onChangeColor) {\n        onChangeColor(n);\n      }\n    }\n  };\n  return (\n    <div>\n      <Row>\n        <Col xs={2}>\n          <div className=\"border rounded border-2 p-1 h-100\">\n            <div\n              className=\"h-100\"\n              style={{\n                backgroundColor: webColor,\n                width: '100%',\n              }}\n            >\n              &nbsp;\n            </div>\n          </div>\n        </Col>\n        <Col>\n          <Form.Group as={Row} xs={2} lg={6}>\n            {disableMode ? null : (\n              <>\n                <Form.Label column sm={6} md={3} lg=\"auto\">\n                  Mode:\n                </Form.Label>\n                <Col xs={6} md={3}>\n                  <Form.Select\n                    defaultValue={mode}\n                    onChange={(ev) => setMode(parseInt(ev.currentTarget.value))}\n                  >\n                    <option value={BrightnessMode.normal}>Normal</option>\n                    <option value={BrightnessMode.shadow}>Shadow</option>\n                    <option value={BrightnessMode.highlight}>Highlight</option>\n                  </Form.Select>\n                </Col>\n              </>\n            )}\n\n            <Form.Label column xs={6} md={3} lg=\"auto\">\n              SMD:\n            </Form.Label>\n            <Col xs={6} md={3} lg=\"auto\">\n              <Form.Control value={colorInput} onChange={colorInputChange} />\n            </Col>\n\n            <Form.Label column xs={4} lg=\"auto\">\n              Picker:{' '}\n            </Form.Label>\n            <Col xs={4}>\n              <Form.Control\n                type=\"color\"\n                value={webColor}\n                onChange={webColorChange}\n              />\n            </Col>\n            <Form.Label className=\"text-center\" column xs={4}>\n              Web: {webColor}\n            </Form.Label>\n          </Form.Group>\n\n          <div className={styles.Sliders}>\n            <Row className={styles.R}>\n              <Col>\n                <Form.Range\n                  ref={rSlider}\n                  min={0}\n                  max={7}\n                  step={1}\n                  value={r}\n                  onChange={rgbChange}\n                />\n              </Col>\n              <Col className={styles.Value} xs=\"auto\">\n                {formatBitHex(r)}\n              </Col>\n            </Row>\n            <Row className={styles.G}>\n              <Col>\n                <Form.Range\n                  ref={gSlider}\n                  min={0}\n                  max={7}\n                  step={1}\n                  value={g}\n                  onChange={rgbChange}\n                />\n              </Col>\n              <Col className={styles.Value} xs=\"auto\">\n                {formatBitHex(g)}\n              </Col>\n            </Row>\n            <Row className={styles.B}>\n              <Col>\n                <Form.Range\n                  ref={bSlider}\n                  min={0}\n                  max={7}\n                  step={1}\n                  value={b}\n                  onChange={rgbChange}\n                />\n              </Col>\n              <Col className={styles.Value} xs=\"auto\">\n                {formatBitHex(b)}\n              </Col>\n            </Row>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getColor, setColor } from './features/palette/paletteSlice';\nimport { SMDColorSelector } from './features/palette/SMDColorSelector';\n\nexport function ColorsPage(): JSX.Element {\n  const dispatch = useAppDispatch();\n  const { color, colorMode } = useAppSelector(getColor);\n  const onChangeColor = (ncolor: number) => {\n    dispatch(setColor(ncolor));\n  };\n  return (\n    <div>\n      <SMDColorSelector\n        initialColor={color}\n        initialBrightnessMode={colorMode}\n        onChangeColor={onChangeColor}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport {\n  BrightnessMode,\n  convert24BitsToWeb,\n  convertSMDTo24Bit,\n  selectMode,\n} from '../../utils/smdColors';\n\nexport interface SMDPaletteColors {\n  colors: number[];\n  mode?: number;\n}\n\nexport function SMDPaletteColors({\n  colors,\n  mode = BrightnessMode.normal,\n}: SMDPaletteColors): JSX.Element {\n  const elements = colors.map((color) => (\n    <div\n      className=\"text-center\"\n      style={{\n        backgroundColor: convert24BitsToWeb(\n          convertSMDTo24Bit(color, selectMode(mode)),\n        ),\n      }}\n    >\n      <span style={{ color: 'white', mixBlendMode: 'difference' }}>\n        {`0x${color.toString(16)}`}&nbsp;\n      </span>\n    </div>\n  ));\n  return <div className=\"border rounded border-2 p-1\">{elements}</div>;\n}\n","import React from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport {\n  getGradient,\n  setGradientEnd,\n  setGradientStart,\n} from './features/palette/paletteSlice';\nimport { generateGradient } from './utils/smdColors';\nimport { SMDColorSelector } from './features/palette/SMDColorSelector';\nimport { SMDPaletteColors } from './features/palette/SMDPaletteColors';\n\nexport function GradientsPage(): JSX.Element {\n  const { gradientStart, gradientEnd, gradientSteps, gradientMode } =\n    useAppSelector(getGradient);\n  const gradientColors = generateGradient(\n    gradientStart,\n    gradientEnd,\n    gradientSteps,\n  );\n  const dispatch = useAppDispatch();\n  const gradientText = gradientColors\n    .map((color) => `0x${color.toString(16)}`)\n    .join(', ');\n  return (\n    <div>\n      <Row>\n        <Col lg={6}>\n          <SMDColorSelector\n            initialColor={gradientStart}\n            initialBrightnessMode={gradientMode}\n            disableMode\n            onChangeColor={(color) => dispatch(setGradientStart(color))}\n          />\n        </Col>\n        <Col lg={6}>\n          <SMDColorSelector\n            initialColor={gradientEnd}\n            initialBrightnessMode={gradientMode}\n            disableMode\n            onChangeColor={(color) => dispatch(setGradientEnd(color))}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <SMDPaletteColors colors={gradientColors} mode={gradientMode} />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form.Control as=\"textarea\" value={gradientText} />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport { getControlAddressValues, MemorySpace } from '../../utils/vdp';\n\nexport interface ControlAdressOpProps {\n  op: number;\n}\n\nexport function ControlAdressOp({ op }: ControlAdressOpProps): JSX.Element {\n  const values = getControlAddressValues(op);\n  return (\n    <dl className=\"row\">\n      <dt className=\"col-3 text-end\">Memory Space:</dt>\n      <dd className=\"col-9\">{MemorySpace[values.memorySpace]}</dd>\n      <dt className=\"col-3 text-end\">Operation type:</dt>\n      <dd className=\"col-9\">{values.write ? 'Write' : 'Read'}</dd>\n      <dt className=\"col-3 text-end\">Address:</dt>\n      <dd className=\"col-9\">{`0x${values.address.toString(16)}`}</dd>\n      <dt className=\"col-3 text-end\">DMA?:</dt>\n      <dd className=\"col-9\">{values.DMA ? 'Yes' : 'No'}</dd>\n      <dt className=\"col-3 text-end\">VRAM to VRAM copy?:</dt>\n      <dd className=\"col-9\">{values.VRAM2VRAMcp ? 'Yes' : 'No'}</dd>\n    </dl>\n  );\n}\n","import React, { ChangeEvent, useState } from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { interpretLongValueToControl } from '../../utils/vdp';\nimport { ControlAdressOp } from './ControlAddressOp';\n\nexport function ControlOp() {\n  const [opcodeText, setOpcodeText] = useState('0x0');\n  function onOpcodeChange(ev: ChangeEvent<HTMLInputElement>) {\n    setOpcodeText(ev.currentTarget.value);\n  }\n  const opcode = parseInt(opcodeText);\n  const result = interpretLongValueToControl(opcode);\n  let elements;\n  if (result.length === 1) {\n    elements = <ControlAdressOp op={result[0]} />;\n  }\n  return (\n    <div>\n      <p className=\"text-center\">\n        Type there the number writen to 0xC00004 (Control Port of VDP) to see\n        what it does. Start with &quot;0x&quot; for hexadecimal.\n      </p>\n      <Form.Group as={Row}>\n        <Form.Label className=\"text-end\" column xs={3}>\n          Op Code\n        </Form.Label>\n        <Col>\n          <Form.Control value={opcodeText} onChange={onOpcodeChange} />\n        </Col>\n      </Form.Group>\n      {elements}\n    </div>\n  );\n}\n","import React from 'react';\nimport { ControlOp } from './features/vdp-analysis/ControlOp';\n\nexport function VDPControl() {\n  return <ControlOp />;\n}\n","import React from 'react';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Redirect,\n} from 'react-router-dom';\nimport { Container, Nav } from 'react-bootstrap';\nimport { ColorsPage } from './ColorsPage';\nimport { GradientsPage } from './GradientsPage';\nimport { VDPControl } from './VDPControl';\n\nfunction App(): JSX.Element {\n  return (\n    <Container>\n      <h1>Mega Tools</h1>\n      <a className=\"float-end\" href=\"https://github.com/StealthC/mega-tools\">\n        View on Github\n      </a>\n      <p className=\"pb-2\">\n        Here you may encounter some tools to help learn Sega Genesis/Mega Drive\n        development.\n      </p>\n\n      <Router>\n        <Nav variant=\"tabs\">\n          <Nav.Item>\n            <Nav.Link as={NavLink} to=\"/colors\">\n              Color Picker\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link as={NavLink} to=\"/gradient\">\n              Gradient Generator\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link as={NavLink} to=\"/vdpcontrol\">\n              VDP Control\n            </Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <div className=\"py-4\">\n          <Switch>\n            <Route path=\"/colors\">\n              <ColorsPage />\n            </Route>\n            <Route path=\"/gradient\">\n              <GradientsPage />\n            </Route>\n            <Route path=\"/vdpcontrol\">\n              <VDPControl />\n            </Route>\n            <Route path=\"/\">\n              <Redirect to=\"/colors\" />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n\n      <p className=\"pt-4 text-center\">\n        If you like this project and want to help me to create more,{' '}\n        <a href=\"https://www.patreon.com/stealthc\">\n          please consider being my patron\n        </a>\n        .\n      </p>\n    </Container>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500),\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  },\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount));\n    }\n  };\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport paletteReducer from '../features/palette/paletteSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    palette: paletteReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './app/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}